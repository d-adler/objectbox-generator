/*
 * Copyright 2019 ObjectBox Ltd. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Package generator provides tools to generate ObjectBox entity bindings between GO structs & ObjectBox schema
package generator

import (
	"fmt"
	"io/ioutil"
	"math/rand"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/objectbox/objectbox-go/internal/generator/model"
)

// Version specifies the current generator version.
// It is used to validate generated code compatibility and is increased when there are changes in the generated code.
// Internal generator changes that don't change the output do not cause an increase.
const Version = 5

// ModelInfoFile returns the model info JSON file name in the given directory
func ModelInfoFile(dir string) string {
	return filepath.Join(dir, "objectbox-model.json")
}

// CodeGenerator interface is used to abstract per-language generators, e.g. for Go, C, C++, etc
type CodeGenerator interface {
	// IsGeneratedFile returns true if the given path is recognized as a file generated by this generator
	IsGeneratedFile(file string) bool

	// ParseSource reads the source file and creates a model representation
	ParseSource(sourceFile string) (*model.ModelInfo, error)

	// WriteBindingFiles generates and writes binding source code files
	WriteBindingFiles(sourceFile string, options Options) error

	// WriteBindingFiles generates and writes binding source code file for model setup
	WriteModelBindingFile(options Options, modelInfo *model.ModelInfo) error
}

// WriteFile writes data to targetFile, while using permissions either from the targetFile or permSource
func WriteFile(file string, data []byte, permSource string) error {
	var perm os.FileMode
	// copy permissions either from the existing file or from the source file
	if info, _ := os.Stat(file); info != nil {
		perm = info.Mode()
	} else if info, err := os.Stat(permSource); info != nil {
		perm = info.Mode()
	} else {
		return err
	}

	return ioutil.WriteFile(file, data, perm)
}

// Process is the main API method of the package
// it takes source file & model-information file paths and generates bindings (as a sibling file to the source file)
func Process(sourceFile string, options Options) error {
	var err error

	// if no random generator is provided, we create and seed a new one
	if options.Rand == nil {
		options.Rand = rand.New(rand.NewSource(time.Now().UTC().UnixNano()))
	}

	if len(options.ModelInfoFile) == 0 {
		options.ModelInfoFile = ModelInfoFile(filepath.Dir(sourceFile))
	}

	var modelInfo *model.ModelInfo

	modelInfo, err = model.LoadOrCreateModel(options.ModelInfoFile)
	if err != nil {
		return fmt.Errorf("can't init ModelInfo: %s", err)
	}

	modelInfo.Rand = options.Rand
	defer modelInfo.Close()

	if err = modelInfo.Validate(); err != nil {
		return fmt.Errorf("invalid ModelInfo loaded: %s", err)
	}

	// if the model is valid, upgrade it to the latest version
	modelInfo.MinimumParserVersion = model.ModelVersion
	modelInfo.ModelVersion = model.ModelVersion

	if err = createBinding(options, sourceFile, modelInfo); err != nil {
		return err
	}

	if err = createModel(options, modelInfo); err != nil {
		return err
	}

	return nil
}

func createBinding(options Options, sourceFile string, storedModel *model.ModelInfo) error {
	currentModel, err := options.CodeGenerator.ParseSource(sourceFile)
	if err != nil {
		return err
	}

	if err = mergeBindingWithModelInfo(currentModel, storedModel); err != nil {
		return fmt.Errorf("can't merge model information: %s", err)
	}

	if err = storedModel.CheckRelationCycles(); err != nil {
		return err
	}

	return options.CodeGenerator.WriteBindingFiles(sourceFile, options)
}

func createModel(options Options, modelInfo *model.ModelInfo) error {
	if err := modelInfo.Write(); err != nil {
		return fmt.Errorf("can't write model-info file %s: %s", options.ModelInfoFile, err)
	}

	return options.CodeGenerator.WriteModelBindingFile(options, modelInfo)
}

const recursionSuffix = "/..."

// Clean removes generated files in the given path.
// Removes *.obx.go and objectbox-model.go but keeps objectbox-model.json
func Clean(codeGenerator CodeGenerator, path string) error {
	var recursive bool

	// if it's a pattern
	if strings.HasSuffix(path, recursionSuffix) {
		recursive = true
		path = path[0:len(path)-len(recursionSuffix)] + "/*"
	} else {
		// if it's a directory
		if finfo, err := os.Stat(path); err == nil && finfo.IsDir() {
			path = path + "/*"
		}
	}

	matches, err := filepath.Glob(path)
	if err != nil {
		return err
	}

	for _, subpath := range matches {
		finfo, err := os.Stat(subpath)
		if err != nil {
			return err
		}

		if recursive && finfo.Mode().IsDir() {
			err = Clean(codeGenerator, subpath+recursionSuffix)
		} else if finfo.Mode().IsRegular() && codeGenerator.IsGeneratedFile(subpath) {
			fmt.Printf("Removing %s\n", subpath)
			err = os.Remove(subpath)
		}

		if err != nil {
			return err
		}
	}

	return nil
}
