// Code generated by ObjectBox; DO NOT EDIT.

#pragma once

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include "flatcc/flatcc.h"
#include "flatcc/flatcc_builder.h"
#include "objectbox.h"

typedef struct ChangeUid {
    uint64_t Id;
    char* Value;
    
} ChangeUid;

enum ChangeUid_ {
    ChangeUid_ENTITY_ID = 1,
    ChangeUid_PROP_ID_Id = 1,
    ChangeUid_PROP_ID_Value = 2,
};

/// Write given object to the FlatBufferBuilder
static bool ChangeUid_to_flatbuffer(flatcc_builder_t* B, const ChangeUid* object, void** out_buffer, size_t* out_size);

/// Read an object from a valid FlatBuffer.
/// If the read object contains vectors or strings, those are allocated on heap and must be freed after use by calling ChangeUid_free_pointers().
/// Thus, when calling this function multiple times on the same object, ensure to call ChangeUid_free_pointers() before subsequent calls to avoid leaks.
/// @returns true if the object was deserialized successfully or false on (allocation) error in which case any memory
///          allocated by this function will also be freed before returning, allowing you to retry.
static bool ChangeUid_from_flatbuffer(const void* data, size_t size, ChangeUid* out_object);

/// Read an object from a valid FlatBuffer, allocating the object on heap.
/// The object must be freed after use by calling ChangeUid_free();
static ChangeUid* ChangeUid_new_from_flatbuffer(const void* data, size_t size);

/// Free memory allocated for vector and string properties, setting the freed pointers to NULL.
static void ChangeUid_free_pointers(ChangeUid* object);

/// Free ChangeUid* object pointer and all its property pointers (vectors and strings).
/// Equivalent to calling ChangeUid_free_pointers() followed by free();
static void ChangeUid_free(ChangeUid* object);

static bool ChangeUid_to_flatbuffer(flatcc_builder_t* B, const ChangeUid* object, void** out_buffer, size_t* out_size) {
    assert(B);
    assert(object);
    assert(out_buffer);
    assert(out_size);

    flatcc_builder_reset(B);
    flatcc_builder_start_buffer(B, 0, 0, 0);
    
    flatcc_builder_ref_t offset_Value = !object->Value ? 0 : flatcc_builder_create_string_str(B, object->Value);

    if (flatcc_builder_start_table(B, 2) != 0) return false;

    void* p;
    flatcc_builder_ref_t* _p;
    
    if (!(p = flatcc_builder_table_add(B, 0, 8, 8))) return false;
    flatbuffers_uint64_write_to_pe(p, object->Id);
    
    if (offset_Value) {
        if (!(_p = flatcc_builder_table_add_offset(B, 1))) return false;
        *_p = offset_Value;
    }
    
    flatcc_builder_ref_t ref;
    if (!(ref = flatcc_builder_end_table(B))) return false;
    if (!flatcc_builder_end_buffer(B, ref)) return false;
    return (*out_buffer = flatcc_builder_finalize_aligned_buffer(B, out_size)) != NULL;
}

static bool ChangeUid_from_flatbuffer(const void* data, size_t size, ChangeUid* out_object) {
    assert(data);
    assert(out_object);

    const uint8_t* table = (const uint8_t*) data + __flatbuffers_uoffset_read_from_pe(data);
    assert(table);
    flatbuffers_voffset_t *vt = (flatbuffers_voffset_t*) (table - __flatbuffers_soffset_read_from_pe(table));
    flatbuffers_voffset_t vs = __flatbuffers_voffset_read_from_pe(vt);

    // variables reused when reading strings and vectors
    flatbuffers_voffset_t offset;
    const flatbuffers_uoffset_t* val;
    size_t len;

    out_object->Id = (vs < sizeof(vt[0]) * (0 + 3)) ? 0 : flatbuffers_uint64_read_from_pe(table + __flatbuffers_voffset_read_from_pe(vt + 0 + 2));
    
    if ((offset = (vs < sizeof(vt[0]) * (1 + 3)) ? 0 : __flatbuffers_voffset_read_from_pe(vt + 1 + 2))) {
        val = (const flatbuffers_uoffset_t*)(table + offset + sizeof(flatbuffers_uoffset_t) + __flatbuffers_uoffset_read_from_pe(table + offset));
        len = (size_t) __flatbuffers_uoffset_read_from_pe(val - 1);
        out_object->Value = (char*) malloc((len+1) * sizeof(char));
        if (out_object->Value == NULL) {
            ChangeUid_free_pointers(out_object);
            return false;
        }
        memcpy((void*)out_object->Value, (const void*)val, len+1);
        
    } else {
        out_object->Value = NULL;
    }
    
    return true;
}

static ChangeUid* ChangeUid_new_from_flatbuffer(const void* data, size_t size) {
    ChangeUid* object = (ChangeUid*) malloc(sizeof(ChangeUid));
    if (object) {
        if (!ChangeUid_from_flatbuffer(data, size, object)) {
            free(object);
            object = NULL;
        }
    }
    return object;
}

static void ChangeUid_free_pointers(ChangeUid* object) {
    if (object == NULL) return;
    if (object->Value) {
        free(object->Value);
        object->Value = NULL;
    }
    
}

static void ChangeUid_free(ChangeUid* object) {
    ChangeUid_free_pointers(object);
    free(object);
}

/// Insert or update the given object in the database.
/// @param object (in & out) will be updated with a newly inserted ID if the one specified previously was zero. If an ID
/// was already specified (non-zero), it will remain unchanged.
/// @return object ID from the object param (see object param docs) or a zero on error. If a zero was returned, you can
/// check obx_last_error_*() to get the error details. In an unlikely event that those functions return no error
/// code/message, the error occurred in FlatBuffers serialization, e.g. due to memory allocation issues.
static obx_id ChangeUid_put(OBX_store* store, ChangeUid* object) {
    flatcc_builder_t builder;
    flatcc_builder_init(&builder);

    obx_id id = 0;
    size_t size = 0;
    void* buffer = NULL;
    if (!ChangeUid_to_flatbuffer(&builder, object, &buffer, &size)) {
        // if the FlatBuffers serialization fails, we clear any previous ObjectBox errors, so that when our caller
        // checks obx_last_error_code() it will be zero in this case.
        obx_last_error_clear();
    } else {
        OBX_box* box = obx_box(store, ChangeUid_ENTITY_ID);
        if (box != NULL) {
            id = obx_box_put_object(box, buffer, size, OBXPutMode_PUT);  // 0 on error
        }
    }

    flatcc_builder_clear(&builder);
    if (buffer) flatcc_builder_aligned_free(buffer);

    if (id != 0) {
        object->Id = id;  // update the ID property on new objects for convenience
    }

    return id;
}

/// Read an object from the database, returning a pointer.
/// @return an object pointer or NULL if an object with the given ID doesn't exist or any other error occurred. You can
/// check obx_last_error_*() if NULL is returned to get the error details. In an unlikely event that those functions
/// return no error code/message, the error occurred in FlatBuffers serialization, e.g. due to memory allocation issues.
/// @note: The returned object must be freed after use by calling ChangeUid_free();
static ChangeUid* ChangeUid_get(OBX_store* store, obx_id id) {
    // We need an explicit TX - read data lifecycle is bound to the open TX.
    OBX_txn* tx = obx_txn_read(store);
    if (!tx) return NULL;

    OBX_cursor* cursor = obx_cursor(tx, ChangeUid_ENTITY_ID);
    if (!cursor) {
        obx_txn_close(tx);
        return NULL;
    }

    ChangeUid* result = NULL;
    void* data;
    size_t size;
    if (obx_cursor_get(cursor, id, &data, &size) == OBX_SUCCESS) {
        result = ChangeUid_new_from_flatbuffer(data, size);
        if (result == NULL) {
            // if the FlatBuffers serialization fails, we clear any previous ObjectBox errors, so that when our caller
            // checks obx_last_error_code() it will be zero in this case.
            obx_last_error_clear();
        }
    }

    obx_cursor_close(cursor);
    obx_txn_close(tx);
    return result;
}


