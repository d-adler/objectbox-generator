// Code generated by ObjectBox; DO NOT EDIT.

#include "synced.obx.hpp"

const obx::Property<SyncedEntity, OBXPropertyType_Long> SyncedEntity_::id(1);
const obx::RelationProperty<SyncedEntity, SyncedRelTarget> SyncedEntity_::propRelId(2);
const obx::RelationStandalone<SyncedEntity, SyncedRelTarget> SyncedEntity_::standaloneRel(3);

void SyncedEntity_::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const SyncedEntity& object) {
    fbb.Clear();
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.TrackField(4, fbb.PushElement<uint64_t>(object.id));
    fbb.TrackField(6, fbb.PushElement<uint64_t>(object.propRelId));
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

SyncedEntity SyncedEntity_::fromFlatBuffer(const void* data, size_t size) {
    SyncedEntity object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<SyncedEntity> SyncedEntity_::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<SyncedEntity>(new SyncedEntity());
    fromFlatBuffer(data, size, *object);
    return object;
}

void SyncedEntity_::fromFlatBuffer(const void* data, size_t size, SyncedEntity& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<uint64_t>(4, 0);
    outObject.propRelId = table->GetField<uint64_t>(6, 0);
    
}

const obx::Property<SyncedRelTarget, OBXPropertyType_Long> SyncedRelTarget_::id(1);

void SyncedRelTarget_::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const SyncedRelTarget& object) {
    fbb.Clear();
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.TrackField(4, fbb.PushElement<uint64_t>(object.id));
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

SyncedRelTarget SyncedRelTarget_::fromFlatBuffer(const void* data, size_t size) {
    SyncedRelTarget object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<SyncedRelTarget> SyncedRelTarget_::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<SyncedRelTarget>(new SyncedRelTarget());
    fromFlatBuffer(data, size, *object);
    return object;
}

void SyncedRelTarget_::fromFlatBuffer(const void* data, size_t size, SyncedRelTarget& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<uint64_t>(4, 0);
    
}

