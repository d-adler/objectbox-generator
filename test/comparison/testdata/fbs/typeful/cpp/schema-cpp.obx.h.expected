// Code generated by ObjectBox; DO NOT EDIT.

#pragma once

#include <cstdbool>
#include <cstdint>

#include "flatbuffers/flatbuffers.h"
#include "objectbox-cpp.h"
#include "objectbox.h"

namespace ns { struct AnnotatedEntity; }

struct Typeful_;

/// Entity documentation is copied
/// into the generated output
struct Typeful {
    using _OBX_MetaInfo = Typeful_;
    
    uint64_t id;
    int32_t int_;
    int8_t int8;
    int16_t int16;
    int32_t int32;
    int64_t int64;
    uint32_t uint;
    uint8_t uint8;
    uint16_t uint16;
    uint32_t uint32;
    uint64_t uint64;
    bool bool_;
    std::string string;
    std::vector<std::string> stringvector;
    int8_t byte;
    uint8_t ubyte;
    std::vector<int8_t> bytevector;
    std::vector<uint8_t> ubytevector;
    float float32;
    double float64;
    float float_;
    double double_;
    /// Relation to an entity declared later in the same file
    uint64_t relId;
};

struct Typeful_ {
    static constexpr obx::Property<Typeful, OBXPropertyType_Long, 1> id{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Int, 2> int_{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Byte, 3> int8{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Short, 4> int16{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Int, 5> int32{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Long, 6> int64{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Int, 7> uint{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Byte, 8> uint8{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Short, 9> uint16{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Int, 10> uint32{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Long, 11> uint64{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Bool, 12> bool_{};
    static constexpr obx::Property<Typeful, OBXPropertyType_String, 13> string{};
    static constexpr obx::Property<Typeful, OBXPropertyType_StringVector, 14> stringvector{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Byte, 15> byte{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Byte, 16> ubyte{};
    static constexpr obx::Property<Typeful, OBXPropertyType_ByteVector, 17> bytevector{};
    static constexpr obx::Property<Typeful, OBXPropertyType_ByteVector, 18> ubytevector{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Float, 19> float32{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Double, 20> float64{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Float, 21> float_{};
    static constexpr obx::Property<Typeful, OBXPropertyType_Double, 22> double_{};
    static constexpr obx::RelationProperty<Typeful, ns::AnnotatedEntity, 23> relId{};

    static constexpr obx_schema_id entityId() { return 1; }

    static void setObjectId(Typeful& object, obx_id newId) { object.id = newId; }

    /// Write given object to the FlatBufferBuilder
    static void toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const Typeful& object);

    /// Read an object from a valid FlatBuffer
    static Typeful fromFlatBuffer(const void* data, size_t size);

    /// Read an object from a valid FlatBuffer
    static std::unique_ptr<Typeful> newFromFlatBuffer(const void* data, size_t size);

    /// Read an object from a valid FlatBuffer
    static void fromFlatBuffer(const void* data, size_t size, Typeful& outObject);
};

struct Typeful; 

namespace ns {
struct Annotated_;

struct Annotated {
    using _OBX_MetaInfo = Annotated_;
    
    /// Objectbox requires an ID property.
    /// It is recognized automatically if it has a right name ("id") or needs to be annotated otherwise.
    uint64_t identifier;
    std::string fullName;
    int64_t time;
    uint64_t relId;
};

struct Annotated_ {
    static constexpr obx::Property<Annotated, OBXPropertyType_Long, 1> identifier{};
    static constexpr obx::Property<Annotated, OBXPropertyType_String, 2> fullName{};
    static constexpr obx::Property<Annotated, OBXPropertyType_Date, 3> time{};
    static constexpr obx::RelationProperty<Annotated, Typeful, 4> relId{};
    static constexpr obx::RelationStandalone<Annotated, Typeful, 1> typefuls{};
    static constexpr obx::RelationStandalone<Annotated, Typeful, 2> m2m{};

    static constexpr obx_schema_id entityId() { return 2; }

    static void setObjectId(Annotated& object, obx_id newId) { object.identifier = newId; }

    /// Write given object to the FlatBufferBuilder
    static void toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const Annotated& object);

    /// Read an object from a valid FlatBuffer
    static Annotated fromFlatBuffer(const void* data, size_t size);

    /// Read an object from a valid FlatBuffer
    static std::unique_ptr<Annotated> newFromFlatBuffer(const void* data, size_t size);

    /// Read an object from a valid FlatBuffer
    static void fromFlatBuffer(const void* data, size_t size, Annotated& outObject);
};
}  // namespace ns


namespace ns {
struct TSDate_;

struct TSDate {
    using _OBX_MetaInfo = TSDate_;
    
    uint64_t id;
    int64_t timestamp;
};

struct TSDate_ {
    static constexpr obx::Property<TSDate, OBXPropertyType_Long, 1> id{};
    static constexpr obx::Property<TSDate, OBXPropertyType_Date, 2> timestamp{};

    static constexpr obx_schema_id entityId() { return 3; }

    static void setObjectId(TSDate& object, obx_id newId) { object.id = newId; }

    /// Write given object to the FlatBufferBuilder
    static void toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const TSDate& object);

    /// Read an object from a valid FlatBuffer
    static TSDate fromFlatBuffer(const void* data, size_t size);

    /// Read an object from a valid FlatBuffer
    static std::unique_ptr<TSDate> newFromFlatBuffer(const void* data, size_t size);

    /// Read an object from a valid FlatBuffer
    static void fromFlatBuffer(const void* data, size_t size, TSDate& outObject);
};
}  // namespace ns


namespace ns {
struct TSDateNano_;

struct TSDateNano {
    using _OBX_MetaInfo = TSDateNano_;
    
    uint64_t id;
    int64_t timestamp;
};

struct TSDateNano_ {
    static constexpr obx::Property<TSDateNano, OBXPropertyType_Long, 1> id{};
    static constexpr obx::Property<TSDateNano, OBXPropertyType_DateNano, 2> timestamp{};

    static constexpr obx_schema_id entityId() { return 4; }

    static void setObjectId(TSDateNano& object, obx_id newId) { object.id = newId; }

    /// Write given object to the FlatBufferBuilder
    static void toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const TSDateNano& object);

    /// Read an object from a valid FlatBuffer
    static TSDateNano fromFlatBuffer(const void* data, size_t size);

    /// Read an object from a valid FlatBuffer
    static std::unique_ptr<TSDateNano> newFromFlatBuffer(const void* data, size_t size);

    /// Read an object from a valid FlatBuffer
    static void fromFlatBuffer(const void* data, size_t size, TSDateNano& outObject);
};
}  // namespace ns

