// Code generated by ObjectBox; DO NOT EDIT.

#pragma once

#include <cstdbool>
#include <cstdint>

#include "flatbuffers/flatbuffers.h"
#include "objectbox-cpp.h"
#include "objectbox.h"

struct SyncedRelTarget; 

struct SyncedEntity_;

struct SyncedEntity {
    using _OBX_MetaInfo = SyncedEntity_;
    
    uint64_t id;
    uint64_t propRelId;
};

struct SyncedEntity_ {
    static const obx::Property<SyncedEntity, OBXPropertyType_Long> id;
    static const obx::RelationProperty<SyncedEntity, SyncedRelTarget> propRelId;
    static const obx::RelationStandalone<SyncedEntity, SyncedRelTarget> standaloneRel;

    static constexpr obx_schema_id entityId() { return 5; }

    static void setObjectId(SyncedEntity& object, obx_id newId) { object.id = newId; }

    /// Write given object to the FlatBufferBuilder
    static void toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const SyncedEntity& object);

    /// Read an object from a valid FlatBuffer
    static SyncedEntity fromFlatBuffer(const void* data, size_t size);

    /// Read an object from a valid FlatBuffer
    static std::unique_ptr<SyncedEntity> newFromFlatBuffer(const void* data, size_t size);

    /// Read an object from a valid FlatBuffer
    static void fromFlatBuffer(const void* data, size_t size, SyncedEntity& outObject);
};


struct SyncedRelTarget_;

struct SyncedRelTarget {
    using _OBX_MetaInfo = SyncedRelTarget_;
    
    uint64_t id;
};

struct SyncedRelTarget_ {
    static const obx::Property<SyncedRelTarget, OBXPropertyType_Long> id;

    static constexpr obx_schema_id entityId() { return 6; }

    static void setObjectId(SyncedRelTarget& object, obx_id newId) { object.id = newId; }

    /// Write given object to the FlatBufferBuilder
    static void toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const SyncedRelTarget& object);

    /// Read an object from a valid FlatBuffer
    static SyncedRelTarget fromFlatBuffer(const void* data, size_t size);

    /// Read an object from a valid FlatBuffer
    static std::unique_ptr<SyncedRelTarget> newFromFlatBuffer(const void* data, size_t size);

    /// Read an object from a valid FlatBuffer
    static void fromFlatBuffer(const void* data, size_t size, SyncedRelTarget& outObject);
};

