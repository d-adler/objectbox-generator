// Code generated by ObjectBox; DO NOT EDIT.

#pragma once

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include "flatcc/flatcc.h"
#include "flatcc/flatcc_builder.h"
#include "objectbox.h"

typedef struct EntityB {
    uint64_t Id;
    char* New;
    
} EntityB;

enum EntityB_ {
    EntityB_ENTITY_ID = 2,
    EntityB_PROP_ID_Id = 1,
    EntityB_PROP_ID_New = 2,
};

/// Write given object to the FlatBufferBuilder
static bool EntityB_to_flatbuffer(flatcc_builder_t* B, const EntityB* object, void** out_buffer, size_t* out_size);

/// Read an object from a valid FlatBuffer.
/// If the read object contains vectors or strings, those are allocated on heap and must be freed after use by calling EntityB_free_pointers().
/// If the given object already contains un-freed pointers, the memory will be lost - free manually before calling this function on the same object twice. 
/// @returns true if the object was deserialized successfully or false on (allocation) error in which case any memory 
///          allocated by this function will also be freed before returning, allowing you to retry.
static bool EntityB_from_flatbuffer(const void* data, size_t size, EntityB* out_object);

/// Read an object from a valid FlatBuffer, allocating the object on heap. 
/// The object must be freed after use by calling EntityB_free();
static EntityB* EntityB_new_from_flatbuffer(const void* data, size_t size);

/// Free memory allocated for vector and string properties.  
static void EntityB_free_pointers(EntityB* object);

/// Free EntityB* object pointer and all its property pointers (vectors and strings).
/// Equivalent to calling EntityB_free_pointers() followed by free();
static void EntityB_free(EntityB* object);

static bool EntityB_to_flatbuffer(flatcc_builder_t* B, const EntityB* object, void** out_buffer, size_t* out_size) {
    assert(B);
    assert(object);
    assert(out_buffer);
    assert(out_size);

    flatcc_builder_reset(B);
    flatcc_builder_start_buffer(B, 0, 0, 0);
    
    flatcc_builder_ref_t offset_New = !object->New ? 0 : flatcc_builder_create_string_str(B, object->New);

    if (flatcc_builder_start_table(B, 2) != 0) return false;

    void* p;
    flatcc_builder_ref_t* _p;
    
    if (!(p = flatcc_builder_table_add(B, 0, 8, 8))) return false;
    flatbuffers_uint64_write_to_pe(p, object->Id);
    
    if (offset_New) {
        if (!(_p = flatcc_builder_table_add_offset(B, 1))) return false;
        *_p = offset_New;
    }
    
    flatcc_builder_ref_t ref;
    if (!(ref = flatcc_builder_end_table(B))) return false;
    if (!flatcc_builder_end_buffer(B, ref)) return false;
    return (*out_buffer = flatcc_builder_finalize_aligned_buffer(B, out_size)) != NULL;
}

static bool EntityB_from_flatbuffer(const void* data, size_t size, EntityB* out_object) {
    assert(data);
    assert(out_object);

    const uint8_t* table = (const uint8_t*) data + __flatbuffers_uoffset_read_from_pe(data);
    assert(table);
    flatbuffers_voffset_t *vt = (flatbuffers_voffset_t*) (table - __flatbuffers_soffset_read_from_pe(table));
    flatbuffers_voffset_t vs = __flatbuffers_voffset_read_from_pe(vt);

    // variables reused when reading strings and vectors
    flatbuffers_voffset_t offset;
    const flatbuffers_uoffset_t* val;
    size_t len;

    out_object->Id = (vs < sizeof(vt[0]) * (0 + 3)) ? 0 : flatbuffers_uint64_read_from_pe(table + __flatbuffers_voffset_read_from_pe(vt + 0 + 2));
    
    if ((offset = (vs < sizeof(vt[0]) * (1 + 3)) ? 0 : __flatbuffers_voffset_read_from_pe(vt + 1 + 2))) {
        val = (const flatbuffers_uoffset_t*)(table + offset + sizeof(flatbuffers_uoffset_t) + __flatbuffers_uoffset_read_from_pe(table + offset));
        len = (size_t) __flatbuffers_uoffset_read_from_pe(val - 1);
        out_object->New = (char*) malloc((len+1) * sizeof(char));
        if (out_object->New == NULL) {
            EntityB_free_pointers(out_object);
            return false;
        }
        memcpy((void*)out_object->New, (const void*)val, len+1);
        
    } else {
        out_object->New = NULL;
    }
    
    return true;
}

static EntityB* EntityB_new_from_flatbuffer(const void* data, size_t size) {
    EntityB* object = (EntityB*) malloc(sizeof(EntityB));
    if (object != NULL) {
        if (!EntityB_from_flatbuffer(data, size, object)) {
            free(object);
            object = NULL;
        }
    }
    return object;
}

static void EntityB_free_pointers(EntityB* object) {
    if (!object) return;
    if (object->New) {
        free(object->New);
        object->New = NULL;
    }
    
}

static void EntityB_free(EntityB* object) {
    EntityB_free_pointers(object);
    free(object);
}

