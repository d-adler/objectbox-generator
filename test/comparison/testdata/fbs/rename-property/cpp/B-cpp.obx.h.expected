// Code generated by ObjectBox; DO NOT EDIT.

#pragma once

#include <stdbool.h>
#include <stdint.h>

#include "flatbuffers/flatbuffers.h"
#include "objectbox.h"

struct EntityB_;

struct EntityB {
    using _OBX_MetaInfo = EntityB_;
    
    uint64_t Id;
    std::string New;
};

struct EntityB_ {
    static const obx_schema_id Id = 1;
    static const obx_schema_id New = 2;

    static constexpr obx_schema_id entityId() { return 2; }

    static void setObjectId(EntityB& object, obx_id newId) { object.Id = newId; }

    /// Write given object to the FlatBufferBuilder
    static void toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const EntityB& object);

    /// Read an object from a valid FlatBuffer
    static EntityB fromFlatBuffer(const void* data, size_t size);

    /// Read an object from a valid FlatBuffer
    static std::unique_ptr<EntityB> newFromFlatBuffer(const void* data, size_t size);

    /// Read an object from a valid FlatBuffer
    static void fromFlatBuffer(const void* data, size_t size, EntityB& outObject);
};

inline void EntityB_::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const EntityB& object) {
    fbb.Clear();
    auto offsetNew = fbb.CreateString(object.New);
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.TrackField(4, fbb.PushElement<uint64_t>(object.Id));
    fbb.AddOffset(6, offsetNew);
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

inline EntityB EntityB_::fromFlatBuffer(const void* data, size_t size) {
    EntityB object;
    fromFlatBuffer(data, size, object);
    return object;
}

inline std::unique_ptr<EntityB> EntityB_::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<EntityB>(new EntityB());
    fromFlatBuffer(data, size, *object);
    return object;
}

inline void EntityB_::fromFlatBuffer(const void* data, size_t size, EntityB& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.Id = table->GetField<uint64_t>(4, 0);
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(6);
        if (ptr) outObject.New.assign(ptr->c_str());
    }
    
}

